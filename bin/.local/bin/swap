#!/bin/bash

## SWAP! ##
# functions to give herbstluftwm some dynamic tiling behaviors.
# by Aaron ninjaaron Christianson <ninjaaron@gmail.com>
 
# Usage #
### auto
#    Swaps client in and out of master or stack. If there is only one frame,
#    auto splits it. Example keybinding in herbstluftwm's autostart:
#        hc keybind -semicolon spawn /PATH/TO/swap auto
### stack_spawn
#    focuses stack and runs command. good wrapper for terminal:
#        hc keybind -period spawn /PATH/TO/swap stack_spawn xterm
### master_spawn
#    moves clients in master to stack and runs command. possible wrapper for
#    dmenu_run:
#        hc keybind -comma spawn /PATH/TO/swap master_spawn dmenu_run
### close
#    If client in master frame is closed, it is replaced by a client from the
#    stack. If stack is empty, it's removed. used like hlwm close command:
#        hc keybind -slash spawn /PATH/TO/swap close
 
# CONFIG #
# split_direction = frame split's orientation. horizontal or vertical
# split_ratio determines split's location. value between 0.1 and 0.9
# stack_layout = stack's hlwm layout. horizontal vertical max grid
# stack_frame = frame for stack. 0=top/left 1=bottom/right d=smaller frame
split_direction=horizontal
split_ratio=0.6667 
stack_layout=vertical 
stack_frame=d 
# Here ends the section for users #
 
hc() { herbstclient ;}; chn() { cmds= , ;}
set_vars() { ### some vars need to be set more than once.
  dump=( (clients vertical:0 0x1c0000a) ) # put the content of hc dump into an array
  # values based directly on the dump
  Ratio= # make the division of primary frame an int
  Orientation= # frames split horizontal or vertical
  Frame= # frame with active client 
  Empty0= # empty frames =')'; same for following 2 vars
  Empty1=;Empty1=
  EmptyAll=;EmptyAll=
  # use absolute values from dump to determine values relative to stack/master.
  if [[  = d ||  !=  ]]
  then [  -ge 5 ] && stack=1 || stack=0
  else  stack=1
  fi
  [  = 0 ] && emptyInact= || emptyInact=
  if [[  = horizontal &&  = 1 ]]; then
    stackD=r; masterD=l; emptyStack=; emptyMaster=
  elif [[  = vertical &&  = 1 ]]; then
    stackD=d; masterD=u; emptyStack=; emptyMaster=
  elif [[  = horizontal &&  = 0 ]]; then
    stackD=l; masterD=r; emptyStack=; emptyMaster=
  elif [[  = vertical &&  = 0 ]]; then
    stackD=u; masterD=d; emptyStack=; emptyMaster=
  fi
  if [  =  ]
  then origin=; target= #  = active frame
  else origin=; target= #  = inactive frame
  fi
}; set_vars # do all that stuff I just said
 
### functions called by the luser
auto() { ### swap out of the current frame into the other.
  if [ -n  ]; then # EmptyAll is null if 1 frame with clients exists.
    chn shift -e  # move client to target frame.
    [  != ')' ] && 
    chn cycle -1 , shift -e  , focus -e  , cycle 1
  else # one frame? split it. move client to new frame, set stack layout.
    hc split  ; set_vars
    [  = horizontal ]&&chn shift -e r || chn shift -e d
    chn focus -e  , set_layout  
    [  = 0 ] && chn focus -e 
  fi; hc chain 
}
stack_spawn() { ### spawn applications in the stack.
  [  = ')' ] &&  || # just spawn if no other clients exist.
    if [ -z  ]; then ; auto; else hc focus -e ; ; fi
}
master_spawn() { ### spawn applications in the master.
  if [  =  ')' ]
  then 
  else # moves all the clients in master out and then spawn
    [ -z  ] && auto
    while [  != ')' ]; do
      hc chain , focus -e  , shift -e  , focus -e 
      set_vars
    done;
  fi
}
close() { ### replace master client on close. removes stack if empty.
  hc close; set_vars
  [  = ')' ]&&
    hc chain , focus -e  , shift -e &&set_vars
  [  = ')' ] && hc chain , focus -e  , remove
}
$@;exit # do something and exit
