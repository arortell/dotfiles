[{'word': 'AbstractBasicAuthHandler', 'kind': 'c', 'abbr': 'AbstractBasicAuthHandler: <class>', 'dup': 1}, {'word': 'AbstractDigestAuthHandler', 'kind': 'c', 'abbr': 'AbstractDigestAuthHandler: <class>', 'dup': 1}, {'word': 'AbstractHTTPHandler', 'kind': 'c', 'abbr': 'AbstractHTTPHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'BaseHandler', 'kind': 'c', 'abbr': 'BaseHandler: <class>', 'dup': 1}, {'word': 'CacheFTPHandler', 'kind': 'c', 'abbr': 'CacheFTPHandler(FTPHandler): <class>', 'dup': 1}, {'word': 'ContentTooShortError', 'kind': 'i', 'abbr': 'from urllib.error import URLError, HTTPError, ContentTooShortError', 'dup': 1}, {'word': 'DataHandler', 'kind': 'c', 'abbr': 'DataHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'FTPHandler', 'kind': 'c', 'abbr': 'FTPHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'FancyURLopener', 'kind': 'c', 'abbr': 'FancyURLopener(URLopener): <class>', 'dup': 1}, {'word': 'FileHandler', 'kind': 'c', 'abbr': 'FileHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'HTTPBasicAuthHandler', 'kind': 'c', 'abbr': 'HTTPBasicAuthHandler(AbstractBasicAuthHandler, BaseHandler): <class>', 'dup': 1}, {'word': 'HTTPCookieProcessor', 'kind': 'c', 'abbr': 'HTTPCookieProcessor(BaseHandler): <class>', 'dup': 1}, {'word': 'HTTPDefaultErrorHandler', 'kind': 'c', 'abbr': 'HTTPDefaultErrorHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'HTTPDigestAuthHandler', 'kind': 'c', 'abbr': 'HTTPDigestAuthHandler(BaseHandler, AbstractDigestAuthHandler): <class>', 'dup': 1}, {'word': 'HTTPError', 'kind': 'i', 'abbr': 'from urllib.error import URLError, HTTPError, ContentTooShortError', 'dup': 1}, {'word': 'HTTPErrorProcessor', 'kind': 'c', 'abbr': 'HTTPErrorProcessor(BaseHandler): <class>', 'dup': 1}, {'word': 'HTTPHandler', 'kind': 'c', 'abbr': 'HTTPHandler(AbstractHTTPHandler): <class>', 'dup': 1}, {'word': 'HTTPPasswordMgr', 'kind': 'c', 'abbr': 'HTTPPasswordMgr: <class>', 'dup': 1}, {'word': 'HTTPPasswordMgrWithDefaultRealm', 'kind': 'c', 'abbr': 'HTTPPasswordMgrWithDefaultRealm(HTTPPasswordMgr): <class>', 'dup': 1}, {'word': 'HTTPPasswordMgrWithPriorAuth', 'kind': 'c', 'abbr': 'HTTPPasswordMgrWithPriorAuth(HTTPPasswordMgrWithDefaultRealm): <class>', 'dup': 1}, {'word': 'HTTPRedirectHandler', 'kind': 'c', 'abbr': 'HTTPRedirectHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'HTTPSHandler', 'kind': 'c', 'abbr': 'HTTPSHandler(AbstractHTTPHandler): <class>', 'dup': 1}, {'word': 'MAXFTPCACHE', 'kind': 'v', 'abbr': 'MAXFTPCACHE', 'dup': 1}, {'word': 'OpenerDirector', 'kind': 'c', 'abbr': 'OpenerDirector: <class>', 'dup': 1}, {'word': 'ProxyBasicAuthHandler', 'kind': 'c', 'abbr': 'ProxyBasicAuthHandler(AbstractBasicAuthHandler, BaseHandler): <class>', 'dup': 1}, {'word': 'ProxyDigestAuthHandler', 'kind': 'c', 'abbr': 'ProxyDigestAuthHandler(BaseHandler, AbstractDigestAuthHandler): <class>', 'dup': 1}, {'word': 'ProxyHandler', 'kind': 'c', 'abbr': 'ProxyHandler(BaseHandler): <class>', 'dup': 1}, {'word': 'Request', 'kind': 'c', 'abbr': 'Request: <class>', 'dup': 1}, {'word': 'URLError', 'kind': 'i', 'abbr': 'from urllib.error import URLError, HTTPError, ContentTooShortError', 'dup': 1}, {'word': 'URLopener', 'kind': 'c', 'abbr': 'URLopener: <class>', 'dup': 1}, {'word': 'UnknownHandler', 'kind': 'c', 'abbr': 'UnknownHandler(BaseHandler): <class>', 'dup': 1}, {'word': '__all__', 'kind': 'v', 'abbr': '__all__ = [', 'dup': 1}, {'word': '__init__', 'menu': '.HTTPSHandler', 'kind': 'm', 'abbr': '__init__', 'dup': 1}, {'word': '__tempfiles', 'menu': 'URLopener', 'kind': 'v', 'abbr': '__tempfiles = None', 'dup': 1}, {'word': '__version__', 'kind': 'v', 'abbr': '__version__', 'dup': 1}, {'word': '_call_chain', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def _call_chain(self, chain, kind, meth_name, *args):', 'dup': 1}, {'word': '_cut_port_re', 'kind': 'v', 'abbr': '_cut_port_re = re.compile(r":\d+$", re.ASCII)', 'dup': 1}, {'word': '_ftperrors', 'kind': 'v', 'abbr': '_ftperrors = None', 'dup': 1}, {'word': '_get_content_length', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def _get_content_length(self, request):', 'dup': 1}, {'word': '_get_proxies', 'kind': 'i', 'abbr': 'from _scproxy import _get_proxy_settings, _get_proxies', 'dup': 1}, {'word': '_get_proxy_settings', 'kind': 'i', 'abbr': 'from _scproxy import _get_proxy_settings, _get_proxies', 'dup': 1}, {'word': '_have_ssl', 'kind': 'v', 'abbr': '_have_ssl = False', 'dup': 1}, {'word': '_https_connection', 'kind': 'f', 'abbr': 'def _https_connection(self, host):', 'dup': 1}, {'word': '_localhost', 'kind': 'v', 'abbr': '_localhost = None', 'dup': 1}, {'word': '_noheaders', 'kind': 'v', 'abbr': '_noheaders = None', 'dup': 1}, {'word': '_open', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def _open(self, req, data=None):', 'dup': 1}, {'word': '_open_generic_http', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def _open_generic_http(self, connection_factory, url, data):', 'dup': 1}, {'word': '_opener', 'kind': 'v', 'abbr': '_opener = None', 'dup': 1}, {'word': '_parse', 'menu': 'Request', 'kind': 'm', 'abbr': 'def _parse(self):', 'dup': 1}, {'word': '_parse_proxy', 'kind': 'f', 'abbr': 'def _parse_proxy(proxy):', 'dup': 1}, {'word': '_proxy_bypass_macosx_sysconf', 'kind': 'f', 'abbr': 'def _proxy_bypass_macosx_sysconf(host, proxy_settings):', 'dup': 1}, {'word': '_randombytes', 'kind': 'v', 'abbr': '_randombytes = os.urandom', 'dup': 1}, {'word': '_safe_gethostbyname', 'kind': 'f', 'abbr': 'def _safe_gethostbyname(host):', 'dup': 1}, {'word': '_thishost', 'kind': 'v', 'abbr': '_thishost = None', 'dup': 1}, {'word': '_url_tempfiles', 'kind': 'v', 'abbr': '_url_tempfiles = []', 'dup': 1}, {'word': 'add_handler', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def add_handler(self, handler):', 'dup': 1}, {'word': 'add_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def add_header(self, key, val):', 'dup': 1}, {'word': 'add_parent', 'menu': 'BaseHandler', 'kind': 'm', 'abbr': 'def add_parent(self, parent):', 'dup': 1}, {'word': 'add_password', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def add_password(self, realm, uri, user, passwd):', 'dup': 1}, {'word': 'add_unredirected_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def add_unredirected_header(self, key, val):', 'dup': 1}, {'word': 'addclosehook', 'kind': 'i', 'abbr': 'from urllib.response import addinfourl, addclosehook', 'dup': 1}, {'word': 'addheader', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def addheader(self, *args):', 'dup': 1}, {'word': 'addinfourl', 'kind': 'i', 'abbr': 'from urllib.response import addinfourl, addclosehook', 'dup': 1}, {'word': 'auth_header', 'menu': 'HTTPBasicAuthHandler', 'kind': 'v', 'abbr': 'auth_header = ''Authorization''', 'dup': 1}, {'word': 'base64', 'kind': 'i', 'abbr': 'base64', 'dup': 1}, {'word': 'bisect', 'kind': 'i', 'abbr': 'import bisect', 'dup': 1}, {'word': 'build_opener', 'kind': 'f', 'abbr': 'def build_opener(*handlers):', 'dup': 1}, {'word': 'check_cache', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def check_cache(self):', 'dup': 1}, {'word': 'cleanup', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def cleanup(self):', 'dup': 1}, {'word': 'clear_cache', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def clear_cache(self):', 'dup': 1}, {'word': 'client', 'kind': 'i', 'abbr': 'import http.client', 'dup': 1}, {'word': 'close', 'menu': 'BaseHandler', 'kind': 'm', 'abbr': 'def close(self):', 'dup': 1}, {'word': 'collections', 'kind': 'i', 'abbr': 'import collections', 'dup': 1}, {'word': 'connect_ftp', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def connect_ftp(self, user, passwd, host, port, dirs, timeout):', 'dup': 1}, {'word': 'contextlib', 'kind': 'i', 'abbr': 'import contextlib', 'dup': 1}, {'word': 'cookiejar', 'kind': 'i', 'abbr': 'import http.cookiejar', 'dup': 1}, {'word': 'data', 'menu': 'Request', 'kind': 'm', 'abbr': 'def data(self):', 'dup': 1}, {'word': 'data_open', 'menu': 'DataHandler', 'kind': 'm', 'abbr': 'def data_open(self, req):', 'dup': 1}, {'word': 'do_open', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def do_open(self, http_class, req, **http_conn_args):', 'dup': 1}, {'word': 'do_request_', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def do_request_(self, request):', 'dup': 1}, {'word': 'email', 'kind': 'i', 'abbr': 'import email.utils', 'dup': 1}, {'word': 'endtransfer', 'menu': 'ftpwrapper', 'kind': 'm', 'abbr': 'def endtransfer(self):', 'dup': 1}, {'word': 'error', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def error(self, proto, *args):', 'dup': 1}, {'word': 'file_close', 'menu': 'ftpwrapper', 'kind': 'm', 'abbr': 'def file_close(self):', 'dup': 1}, {'word': 'file_open', 'menu': 'FileHandler', 'kind': 'm', 'abbr': 'def file_open(self, req):', 'dup': 1}, {'word': 'find_user_password', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def find_user_password(self, realm, authuri):', 'dup': 1}, {'word': 'fnmatch', 'kind': 'i', 'abbr': 'from fnmatch import fnmatch', 'dup': 1}, {'word': 'ftp_open', 'menu': 'FTPHandler', 'kind': 'm', 'abbr': 'def ftp_open(self, req):', 'dup': 1}, {'word': 'ftpcache', 'kind': 'v', 'abbr': 'ftpcache = {}', 'dup': 1}, {'word': 'ftperrors', 'kind': 'f', 'abbr': 'def ftperrors():', 'dup': 1}, {'word': 'ftplib', 'kind': 'i', 'abbr': 'import ftplib', 'dup': 1}, {'word': 'ftpwrapper', 'kind': 'c', 'abbr': 'ftpwrapper: <class>', 'dup': 1}, {'word': 'full_url', 'menu': 'Request', 'kind': 'm', 'abbr': 'def full_url(self):', 'dup': 1}, {'word': 'get_algorithm_impls', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_algorithm_impls(self, algorithm):', 'dup': 1}, {'word': 'get_authorization', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_authorization(self, req, chal):', 'dup': 1}, {'word': 'get_cnonce', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_cnonce(self, nonce):', 'dup': 1}, {'word': 'get_entity_digest', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_entity_digest(self, data, chal):', 'dup': 1}, {'word': 'get_full_url', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_full_url(self):', 'dup': 1}, {'word': 'get_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_header(self, header_name, default=None):', 'dup': 1}, {'word': 'get_method', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_method(self):', 'dup': 1}, {'word': 'get_names', 'menu': 'FileHandler', 'kind': 'm', 'abbr': 'def get_names(self):', 'dup': 1}, {'word': 'get_user_passwd', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'get_user_passwd', 'dup': 1}, {'word': 'getpass', 'kind': 'i', 'abbr': 'import getpass', 'dup': 1}, {'word': 'getproxies', 'kind': 'f', 'abbr': 'def getproxies():', 'dup': 1}, {'word': 'getproxies_environment', 'kind': 'f', 'abbr': 'def getproxies_environment():', 'dup': 1}, {'word': 'getproxies_macosx_sysconf', 'kind': 'f', 'abbr': 'def getproxies_macosx_sysconf():', 'dup': 1}, {'word': 'getproxies_registry', 'kind': 'f', 'abbr': 'def getproxies_registry():', 'dup': 1}, {'word': 'handler_order', 'menu': 'ProxyHandler', 'kind': 'v', 'abbr': 'handler_order', 'dup': 1}, {'word': 'has_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def has_header(self, header_name):', 'dup': 1}, {'word': 'has_proxy', 'menu': 'Request', 'kind': 'm', 'abbr': 'def has_proxy(self):', 'dup': 1}, {'word': 'hashlib', 'kind': 'i', 'abbr': 'import hashlib', 'dup': 1}, {'word': 'header_items', 'menu': 'Request', 'kind': 'm', 'abbr': 'def header_items(self):', 'dup': 1}, {'word': 'http', 'kind': 'i', 'abbr': 'import http.cookiejar', 'dup': 1}, {'word': 'http_error', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def http_error(self, url, fp, errcode, errmsg, headers, data=None):', 'dup': 1}, {'word': 'http_error_301', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'http_error_301', 'dup': 1}, {'word': 'http_error_302', 'menu': 'HTTPRedirectHandler', 'kind': 'm', 'abbr': 'http_error_302', 'dup': 1}, {'word': 'http_error_303', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'http_error_303', 'dup': 1}, {'word': 'http_error_307', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'http_error_307', 'dup': 1}, {'word': 'http_error_401', 'menu': 'HTTPBasicAuthHandler', 'kind': 'm', 'abbr': 'http_error_401', 'dup': 1}, {'word': 'http_error_407', 'menu': 'ProxyBasicAuthHandler', 'kind': 'm', 'abbr': 'http_error_407', 'dup': 1}, {'word': 'http_error_auth_reqed', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def http_error_auth_reqed(self, auth_header, host, req, headers):', 'dup': 1}, {'word': 'http_error_default', 'menu': 'HTTPDefaultErrorHandler', 'kind': 'm', 'abbr': 'def http_error_default(self, req, fp, code, msg, hdrs):', 'dup': 1}, {'word': 'http_open', 'menu': 'HTTPHandler', 'kind': 'm', 'abbr': 'def http_open(self, req):', 'dup': 1}, {'word': 'http_request', 'menu': 'AbstractBasicAuthHandler', 'kind': 'm', 'abbr': 'def http_request(self, req):', 'dup': 1}, {'word': 'http_response', 'menu': 'AbstractBasicAuthHandler', 'kind': 'm', 'abbr': 'def http_response(self, req, response):', 'dup': 1}, {'word': 'https_open', 'menu': '.HTTPSHandler', 'kind': 'm', 'abbr': 'def https_open(self, req):', 'dup': 1}, {'word': 'https_request', 'menu': '.HTTPSHandler', 'kind': 'v', 'abbr': 'https_request = AbstractHTTPHandler.do_request_', 'dup': 1}, {'word': 'https_response', 'menu': 'AbstractBasicAuthHandler', 'kind': 'v', 'abbr': 'https_response = http_response', 'dup': 1}, {'word': 'inf_msg', 'menu': 'HTTPRedirectHandler', 'kind': 'v', 'abbr': 'inf_msg', 'dup': 1}, {'word': 'init', 'menu': 'ftpwrapper', 'kind': 'm', 'abbr': 'def init(self):', 'dup': 1}, {'word': 'install_opener', 'kind': 'f', 'abbr': 'def install_opener(opener):', 'dup': 1}, {'word': 'ip2num', 'kind': 'f', 'abbr': 'ip2num', 'dup': 1}, {'word': 'is_authenticated', 'menu': 'HTTPPasswordMgrWithPriorAuth', 'kind': 'm', 'abbr': 'def is_authenticated(self, authuri):', 'dup': 1}, {'word': 'is_suburi', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def is_suburi(self, base, test):', 'dup': 1}, {'word': 'localhost', 'kind': 'f', 'abbr': 'def localhost():', 'dup': 1}, {'word': 'max_redirections', 'menu': 'HTTPRedirectHandler', 'kind': 'v', 'abbr': 'max_redirections', 'dup': 1}, {'word': 'max_repeats', 'menu': 'HTTPRedirectHandler', 'kind': 'v', 'abbr': 'max_repeats', 'dup': 1}, {'word': 'mimetypes', 'kind': 'i', 'abbr': 'import mimetypes', 'dup': 1}, {'word': 'names', 'menu': 'FileHandler', 'kind': 'v', 'abbr': 'names = None', 'dup': 1}, {'word': 'noheaders', 'kind': 'f', 'abbr': 'def noheaders():', 'dup': 1}, {'word': 'open', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open(self, fullurl, data=None):', 'dup': 1}, {'word': 'open_data', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open_data(self, url, data=None):', 'dup': 1}, {'word': 'open_file', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open_file(self, url):', 'dup': 1}, {'word': 'open_ftp', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open_ftp(self, url):', 'dup': 1}, {'word': 'open_http', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open_http(self, url, data=None):', 'dup': 1}, {'word': 'open_https', 'kind': 'f', 'abbr': 'def open_https(self, url, data=None):', 'dup': 1}, {'word': 'open_local_file', 'menu': 'FileHandler', 'kind': 'm', 'abbr': 'def open_local_file(self, req):', 'dup': 1}, {'word': 'open_unknown', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open_unknown(self, fullurl, data=None):', 'dup': 1}, {'word': 'open_unknown_proxy', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def open_unknown_proxy(self, proxy, fullurl, data=None):', 'dup': 1}, {'word': 'parse_http_list', 'kind': 'f', 'abbr': 'def parse_http_list(s):', 'dup': 1}, {'word': 'parse_keqv_list', 'kind': 'f', 'abbr': 'def parse_keqv_list(l):', 'dup': 1}, {'word': 'pathname2url', 'menu': 'DataHandler', 'kind': 'm', 'abbr': 'pathname2url', 'dup': 1}, {'word': 'posixpath', 'kind': 'i', 'abbr': 'import posixpath', 'dup': 1}, {'word': 'prompt_user_passwd', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'def prompt_user_passwd(self, host, realm):', 'dup': 1}, {'word': 'proxy_bypass', 'kind': 'f', 'abbr': 'def proxy_bypass(host):', 'dup': 1}, {'word': 'proxy_bypass_environment', 'kind': 'f', 'abbr': 'def proxy_bypass_environment(host, proxies=None):', 'dup': 1}, {'word': 'proxy_bypass_macosx_sysconf', 'kind': 'f', 'abbr': 'def proxy_bypass_macosx_sysconf(host):', 'dup': 1}, {'word': 'proxy_bypass_registry', 'kind': 'f', 'abbr': 'def proxy_bypass_registry(host):', 'dup': 1}, {'word': 'proxy_open', 'menu': 'ProxyHandler', 'kind': 'm', 'abbr': 'def proxy_open(self, req, proxy, type):', 'dup': 1}, {'word': 'real_close', 'menu': 'ftpwrapper', 'kind': 'm', 'abbr': 'def real_close(self):', 'dup': 1}, {'word': 'redirect_internal', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'def redirect_internal(self, url, fp, errcode, errmsg, headers, data):', 'dup': 1}, {'word': 'redirect_request', 'menu': 'HTTPRedirectHandler', 'kind': 'm', 'abbr': 'def redirect_request(self, req, fp, code, msg, headers, newurl):', 'dup': 1}, {'word': 'reduce_uri', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def reduce_uri(self, uri, default_port=True):', 'dup': 1}, {'word': 'remove_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def remove_header(self, header_name):', 'dup': 1}, {'word': 'request_host', 'kind': 'f', 'abbr': 'def request_host(request):', 'dup': 1}, {'word': 'reset_retry_count', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def reset_retry_count(self):', 'dup': 1}, {'word': 'retrfile', 'menu': 'ftpwrapper', 'kind': 'm', 'abbr': 'def retrfile(self, file, type):', 'dup': 1}, {'word': 'retrieve', 'menu': 'URLopener', 'kind': 'm', 'abbr': 'def retrieve(self, url, filename=None, reporthook=None, data=None):', 'dup': 1}, {'word': 'retry_http_basic_auth', 'menu': 'AbstractBasicAuthHandler', 'kind': 'm', 'abbr': 'def retry_http_basic_auth(self, host, req, realm):', 'dup': 1}, {'word': 'retry_http_digest_auth', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def retry_http_digest_auth(self, req, auth):', 'dup': 1}, {'word': 'retry_https_basic_auth', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'def retry_https_basic_auth(self, url, realm, data=None):', 'dup': 1}, {'word': 'retry_proxy_http_basic_auth', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'def retry_proxy_http_basic_auth(self, url, realm, data=None):', 'dup': 1}, {'word': 'retry_proxy_https_basic_auth', 'menu': 'FancyURLopener', 'kind': 'm', 'abbr': 'def retry_proxy_https_basic_auth(self, url, realm, data=None):', 'dup': 1}, {'word': 'setMaxConns', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def setMaxConns(self, m):', 'dup': 1}, {'word': 'setTimeout', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def setTimeout(self, t):', 'dup': 1}, {'word': 'set_http_debuglevel', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def set_http_debuglevel(self, level):', 'dup': 1}, {'word': 'set_proxy', 'menu': 'Request', 'kind': 'm', 'abbr': 'def set_proxy(self, host, type):', 'dup': 1}, {'word': 'socket', 'kind': 'i', 'abbr': 'import socket', 'dup': 1}, {'word': 'string', 'kind': 'i', 'abbr': 'import string', 'dup': 1}, {'word': 'tempfile', 'kind': 'i', 'abbr': 'import tempfile', 'dup': 1}, {'word': 'thishost', 'kind': 'f', 'abbr': 'def thishost():', 'dup': 1}, {'word': 'time', 'kind': 'i', 'abbr': 'import time', 'dup': 1}, {'word': 'unknown_open', 'menu': 'UnknownHandler', 'kind': 'm', 'abbr': 'def unknown_open(self, req):', 'dup': 1}, {'word': 'update_authenticated', 'menu': 'HTTPPasswordMgrWithPriorAuth', 'kind': 'm', 'abbr': 'def update_authenticated(self, uri, is_authenticated=False):', 'dup': 1}, {'word': 'url2pathname', 'menu': 'DataHandler', 'kind': 'm', 'abbr': 'url2pathname', 'dup': 1}, {'word': 'urlcleanup', 'kind': 'f', 'abbr': 'def urlcleanup():', 'dup': 1}, {'word': 'urlopen', 'kind': 'f', 'abbr': 'def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,', 'dup': 1}, {'word': 'urlretrieve', 'kind': 'f', 'abbr': 'def urlretrieve(url, filename=None, reporthook=None, data=None):', 'dup': 1}, {'word': 'utils', 'kind': 'i', 'abbr': 'import email.utils', 'dup': 1}, {'word': 'version', 'menu': 'URLopener', 'kind': 'v', 'abbr': 'version = "Python-urllib/%s" % __version__', 'dup': 1}, {'word': 'warnings', 'kind': 'i', 'abbr': 'import warnings', 'dup': 1}, {'word': 'winreg', 'kind': 'i', 'abbr': 'import winreg', 'dup': 1}]
