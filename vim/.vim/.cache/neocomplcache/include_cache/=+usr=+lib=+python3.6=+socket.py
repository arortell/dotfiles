[{'word': 'EAGAIN', 'kind': 'v', 'abbr': 'EAGAIN', 'dup': 1}, {'word': 'EBADF', 'kind': 'v', 'abbr': 'EBADF', 'dup': 1}, {'word': 'EWOULDBLOCK', 'kind': 'v', 'abbr': 'EWOULDBLOCK', 'dup': 1}, {'word': 'IntEnum', 'kind': 'i', 'abbr': 'from enum import IntEnum, IntFlag', 'dup': 1}, {'word': 'IntFlag', 'kind': 'i', 'abbr': 'from enum import IntEnum, IntFlag', 'dup': 1}, {'word': 'SocketIO', 'kind': 'c', 'abbr': 'SocketIO(io.RawIOBase): <class>', 'dup': 1}, {'word': '_GLOBAL_DEFAULT_TIMEOUT', 'kind': 'v', 'abbr': '_GLOBAL_DEFAULT_TIMEOUT = object()', 'dup': 1}, {'word': '_GiveupOnSendfile', 'kind': 'c', 'abbr': '_GiveupOnSendfile(Exception): pass <class>', 'dup': 1}, {'word': '_LOCALHOST', 'kind': 'v', 'abbr': '_LOCALHOST', 'dup': 1}, {'word': '_LOCALHOST_V6', 'kind': 'v', 'abbr': '_LOCALHOST_V6', 'dup': 1}, {'word': '__all__', 'kind': 'v', 'abbr': '__all__ = ["fromfd", "getfqdn", "create_connection",', 'dup': 1}, {'word': '__init__', 'menu': 'socket', 'kind': 'm', 'abbr': '__init__', 'dup': 1}, {'word': '__slots__', 'menu': 'socket', 'kind': 'v', 'abbr': '__slots__ = ["__weakref__", "_io_refs", "_closed"]', 'dup': 1}, {'word': '_blocking_errnos', 'kind': 'v', 'abbr': '_blocking_errnos = { EAGAIN, EWOULDBLOCK }', 'dup': 1}, {'word': '_check_sendfile_params', 'menu': 'socket', 'kind': 'm', 'abbr': 'def _check_sendfile_params(self, file, offset, count):', 'dup': 1}, {'word': '_decref_socketios', 'menu': 'socket', 'kind': 'm', 'abbr': 'def _decref_socketios(self):', 'dup': 1}, {'word': '_intenum_converter', 'kind': 'f', 'abbr': 'def _intenum_converter(value, enum_klass):', 'dup': 1}, {'word': '_real_close', 'menu': 'socket', 'kind': 'm', 'abbr': 'def _real_close(self, _ss=_socket.socket):', 'dup': 1}, {'word': '_realsocket', 'kind': 'v', 'abbr': '_realsocket = socket', 'dup': 1}, {'word': '_sendfile_use_send', 'menu': 'socket', 'kind': 'm', 'abbr': '_sendfile_use_send', 'dup': 1}, {'word': '_sendfile_use_sendfile', 'kind': 'f', 'abbr': '_sendfile_use_sendfile', 'dup': 1}, {'word': '_socket', 'kind': 'i', 'abbr': 'import _socket', 'dup': 1}, {'word': 'accept', 'menu': 'socket', 'kind': 'm', 'abbr': 'def accept(self):', 'dup': 1}, {'word': 'close', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def close(self):', 'dup': 1}, {'word': 'create_connection', 'kind': 'f', 'abbr': 'def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,', 'dup': 1}, {'word': 'detach', 'menu': 'socket', 'kind': 'm', 'abbr': 'def detach(self):', 'dup': 1}, {'word': 'errno', 'kind': 'v', 'abbr': 'errno = None', 'dup': 1}, {'word': 'family', 'menu': 'socket', 'kind': 'm', 'abbr': 'def family(self):', 'dup': 1}, {'word': 'fileno', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def fileno(self):', 'dup': 1}, {'word': 'fromfd', 'kind': 'f', 'abbr': 'fromfd', 'dup': 1}, {'word': 'fromshare', 'kind': 'f', 'abbr': 'def fromshare(info):', 'dup': 1}, {'word': 'get_inheritable', 'kind': 'f', 'abbr': 'def get_inheritable(self):', 'dup': 1}, {'word': 'getaddrinfo', 'kind': 'f', 'abbr': 'getaddrinfo', 'dup': 1}, {'word': 'getfqdn', 'kind': 'f', 'abbr': 'def getfqdn(name=''''):', 'dup': 1}, {'word': 'makefile', 'menu': 'socket', 'kind': 'm', 'abbr': 'def makefile(self, mode="r", buffering=None, *,', 'dup': 1}, {'word': 'mode', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def mode(self):', 'dup': 1}, {'word': 'name', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def name(self):', 'dup': 1}, {'word': 'readable', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def readable(self):', 'dup': 1}, {'word': 'readinto', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def readinto(self, b):', 'dup': 1}, {'word': 'seekable', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def seekable(self):', 'dup': 1}, {'word': 'selectors', 'kind': 'i', 'abbr': 'import os, sys, io, selectors', 'dup': 1}, {'word': 'sendfile', 'menu': 'socket', 'kind': 'm', 'abbr': 'sendfile', 'dup': 1}, {'word': 'set_inheritable', 'kind': 'f', 'abbr': 'def set_inheritable(self, inheritable):', 'dup': 1}, {'word': 'socket', 'kind': 'c', 'abbr': 'socket(_socket.socket): <class>', 'dup': 1}, {'word': 'socketpair', 'kind': 'f', 'abbr': 'socketpair', 'dup': 1}, {'word': 'type', 'menu': 'socket', 'kind': 'm', 'abbr': 'def type(self):', 'dup': 1}, {'word': 'writable', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def writable(self):', 'dup': 1}, {'word': 'write', 'menu': 'SocketIO', 'kind': 'm', 'abbr': 'def write(self, b):', 'dup': 1}]
